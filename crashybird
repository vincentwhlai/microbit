let ticks = 0
let emptyObstacleY = 0
let obstacles: game.LedSprite[] = []
let index = 0
let bird: game.LedSprite = null
input.onButtonPressed(Button.A, () => {
    bird.change(LedSpriteProperty.Y, -1)
})
input.onButtonPressed(Button.B, () => {
    bird.change(LedSpriteProperty.Y, 1)
})
index = 0
obstacles = []
bird = game.createSprite(0, 2)
bird.set(LedSpriteProperty.Blink, 300)
basic.forever(() => {
    while (obstacles.length > 0 && obstacles[0].get(LedSpriteProperty.X) == 0) {
        obstacles.removeAt(0).delete()
    }
    for (let obstacle2 of obstacles) {
        obstacle2.change(LedSpriteProperty.X, -1)
    }
    if (ticks % 3 == 0) {
        emptyObstacleY = Math.randomRange(0, 4)
        for (let index2 = 0; index2 <= 4; index2++) {
            if (index2 != emptyObstacleY) {
                obstacles.push(game.createSprite(4, index2))
            }
        }
    }
    for (let obstacle3 of obstacles) {
        if (obstacle3.get(LedSpriteProperty.X) == bird.get(LedSpriteProperty.X) && obstacle3.get(LedSpriteProperty.Y) == bird.get(LedSpriteProperty.Y)) {
            game.addScore(((ticks - 1) / 3) - 1)
            game.gameOver()
        }
    }
    ticks += 1
    if (ticks < 21) {
        basic.pause(1500)
    }
    if (ticks > 20 && ticks < 41) {
        basic.pause(1000)
    }
    if (ticks > 40 && ticks < 81) {
        basic.pause(800)
    }
    if (ticks > 80 && ticks < 121) {
        basic.pause(600)
    }
    if (ticks > 120 && ticks < 161) {
        basic.pause(500)
    }
    if (ticks > 160) {
        basic.pause(300)
    }
})
